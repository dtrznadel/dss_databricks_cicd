trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Bash@3
  displayName: 'Install Databricks CLI'
  inputs:
    targetType: 'inline'
    script: |
      curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
- task: AzureKeyVault@2
  displayName: 'Read DB PAT token from KeyVault'
  inputs:
    azureSubscription: keyvault
    KeyVaultName: 'cloudfidetrainingkv'
    SecretsFilter: 'databricks-token'
    RunAsPreJob: true


- task: AzureCLI@2
  displayName: 'Databricks code pull'
  inputs:
    azureSubscription: keyvault
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      export DATABRICKS_HOST='https://adb-3562053463261361.1.azuredatabricks.net/'
      export DATABRICKS_TOKEN="$(databricks-token)"
      databricks repos update /Repos/dominik.trznadel@cloudfide.com/cicd_repo --branch main

# - task: AzureCLI@2
#   displayName: 'Databricks create job'
#   inputs:
#     azureSubscription: keyvault
#     scriptType: bash
#     scriptLocation: inlineScript
#     inlineScript: |
#       export DATABRICKS_HOST='https://adb-3562053463261361.1.azuredatabricks.net/'
#       export DATABRICKS_TOKEN="$(databricks-token)"
#       response=$(databricks jobs create --json @"$(System.DefaultWorkingDirectory)/sample_job.json" --output json)
#       echo "$response"

- task: AzureCLI@2
  displayName: 'Databricks create or update job'
  inputs:
    azureSubscription: keyvault
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      export DATABRICKS_HOST='https://adb-3562053463261361.1.azuredatabricks.net/'
      export DATABRICKS_TOKEN="$(databricks-token)"
      export job_id=$(databricks jobs list -o json | jq --arg datasetName "sample_job" '.[] | select(.settings.name == $datasetName)' | jq '.job_id')
      if [ ${#job_id} -gt 20 ]; then
        response='multiple jobs identified. $job_id'
      elif [[ "$job_id" =~ ^[0-9]+$ ]]; then
        echo "updating job..."
        jq -n --argjson job_id "$job_id" '{"job_id": $job_id, "new_settings": input}' < "$(System.DefaultWorkingDirectory)/sample_job.json" | jq > "$(System.DefaultWorkingDirectory)/sample_job_update.json"
        echo "$(System.DefaultWorkingDirectory)/sample_job_update.json"
        response=$(databricks jobs reset --json @"$(System.DefaultWorkingDirectory)/sample_job_update.json" --output json)
        rm "$(System.DefaultWorkingDirectory)/sample_job_update.json"
      else
        echo "creating job..."
        response=$(databricks jobs create --json @"$(System.DefaultWorkingDirectory)/sample_job.json" --output json)
      fi
      echo "$response"

- task: AzureCLI@2
  displayName: 'trigger databricks job'
  inputs:
    azureSubscription: keyvault
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      export DATABRICKS_HOST='https://adb-3562053463261361.1.azuredatabricks.net/'
      export DATABRICKS_TOKEN="$(databricks-token)"
      export job_id=$(databricks jobs list -o json | jq --arg datasetName "sample_job" '.[] | select(.settings.name == $datasetName)' | jq '.job_id')
      databricks jobs run-now $job_id